#!/usr/bin/env python3

import argparse
from http import server
import simple_https_server.server as server
import io
import qrcode

import logging
import logging.handlers
import subprocess
import os

logging.basicConfig(filename='web-camera.log', encoding='utf-8', level=logging.DEBUG)

def parse_cli():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", type=str, default="127.0.0.1", help="Interface to bind server to.")
    parser.add_argument("-p", "--port", type=int, default=0, help="Server port.")
    options = parser.parse_args()
    return options


def get_open_port():
    """ Get an open port on the system. """
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("", 0))
    s.listen(1)
    port = s.getsockname()[1]
    s.close()
    return port


def main():

    options = parse_cli()
    if options.port == 0:
        options.port = get_open_port()
    
    port = options.port
    interface = options.interface
    webroot = "vdo.ninja"

    certfile, keyfile = generate_certificates(interface)

    streamid = "asdjkhadg"
    camera_link = f"https://{interface}:{port}/?push={streamid}"
    view_link = f"https://{interface}:{port}/?view={streamid}"


    print("Scan this code with your smartphone and accept the self-signed certificate.")
    print_qrcode(camera_link)
    print(f"To add a camera: {camera_link}")
    print(f"To view the camera: {view_link}")

    handler = logging.handlers.WatchedFileHandler("server.log")
    server_logger = logging.getLogger("server")
    server_logger.addHandler(handler)

    # patch https server's log_message function
    server.CorsHandler.log_message = server_logger.info
    server.sprint = server_logger.info

    print("CTRL^C to exit")
    start_https_server(interface, port, webroot, certfile=certfile, keyfile=keyfile)

def generate_certificates(interface):
    """ Generate ssl certificates using mkcert
    
    Parameters
    ----------
    interface: str
        Name of the domain/interface to generate the certificate for.

    Returns
    -------
    (certfile: str, keyfile: str)
        Path to the certification and key file.
    """
    logging.info(f"Generating certificates for domain {interface}")
    certfile = f"ssl/{interface}.pem"
    keyfile = f"ssl/{interface}-key.pem"
    if not (os.path.exists(certfile) and os.path.exists(keyfile)):
        os.makedirs("ssl", exist_ok=True)
        subprocess.run(["mkcert", interface], cwd="ssl")
    return certfile, keyfile


def print_qrcode(s):
    """ Print a qr code.
    
    Parameters
    ----------
    s: str
        Text to be encoded.
    """
    qr = qrcode.QRCode()
    qr.add_data(s)
    f = io.StringIO()
    qr.print_ascii(out=f)
    f.seek(0)
    print(f.read())


def start_https_server(interface, port, webroot, certfile=None, keyfile=None):
    logging.info(f"Starting server on interface '{interface}' port '{port}' with webroot '{webroot} using certfile '{certfile}' and keyfile '{keyfile}'")
    settings = dict(
        interface=interface,
        port=port,
        webroot=webroot,
        enable_uploads=False,
        disable_caching=False,
        certfile=certfile,
        keyfile=keyfile,
        generate=False,
        basic_username=None,
        basic_password=None,
        enable_b64=False)
    server.run_server(**settings)



if __name__ == "__main__":
    main()